bplist00—_WebMainResource’	
_WebResourceFrameName_WebResourceData_WebResourceMIMEType_WebResourceTextEncodingName^WebResourceURLPO?8<html class="gr__mathcs_emory_edu"><head><meta http-equiv="expires" content="0">

</head><body text="#000000" link="#00ff00" vlink="#f00000" bgcolor="#ffffff" data-gr-c-s-loaded="true">

<hr>
<font size="+2"><b>Working with Sparse Matrices</b></font>
<hr>

<ul>

<p>
</p><li> <font color="darkmagenta"> <b>
        Matrix-vector multiplication: the ordinary approach
        </b></font>
 <ul>
 <p>
 </p><li> <b>Matrix-vector multiplication algorithm (with ordinary matrices)</b>
<p>
</p><ul>
<table bgcolor="lightcyan" border="5">
<tbody><tr> <td>

<font color="blue"><b>
<pre>
  double A[N][N];
  double v[N];

  double result[N];
<font color="darkmagenta">
  // Initialized result to [0,0,...,0]
  for (i = 0; i &lt; N; i++)
     result[i] = 0.0;</font>

<font color="red">
  // Multiply matrix row with vector
  for (i = 0; i &lt; N; i++)    	// row i
  {
      for (j = 0; j &lt; N; j++)
	  result[i] = result[i] + A[i][j] * v[j];         
  }</font>
</pre>
</b></font>

</td> </tr>
</tbody></table>
</ul>
</li></ul>
<p>
</p><hr>
<p>


</p></li><li> <font color="darkmagenta"> <b>
        Storing full and sparse matrices
        </b></font>
  <p>
  </p><ul>
<li> A 
	<font color="blue"><b><i>matrix</i></b></font> is usually stored using a
	<font color="red"><b><i>two-dimensional array</i></b></font>
 <p>
 </p></li><li> But in many problems (especially matrices resulting from
	discretization), the problem matrix is very <b><i>sparse</i></b>
 <p>
     Although sparse matrices 
	<font color="red"><b><i>can</i></b></font> be  stored using
	a 
	<font color="blue"><b><i>two-dimensional array</i></b></font>,
	it is a 
	<font color="red"> <b><i>very bad idea</i></b></font>
	to do so for several reasons:
 </p><p>
</p><p>
</p><ul>
<table bgcolor="yellow" border="5">
<tbody><tr> <td>

 <ol>
 <li> Very 
  <font color="red"><b><i>inefficient use of computer memory</i></b></font>:
	it is not very useful to store many 0 values of the sparse matrix
 <p>
 </p></li><li> The more important reason is 
	<font color="red"><b><i>deteriorated runtime speed</i></b></font>:
	the computer
	program needs to perform 
	<font color="blue"><b>unnecessary computations </b></font>
  <br>
	(e.g.,: x + 0*y = x, you can
	skip the multiplication and addition
	operations)
  </li></ol>
</td> </tr>
</tbody></table>
</ul>
<p>

 </p></li></ul>
<p>
</p><hr>
<hr>
<p>
</p></li><li> <font color="darkmagenta"> <b>
        Storing sparse matrices 
        </b></font>
  <p>
  </p><ul>
 <li> <b>Type of matrices</b>
<p>
</p><ul>
<table bgcolor="lightcyan" border="5">
<tbody><tr> <td>
 <ul>
 <li> <font color="red"><b>static</b></font>:
	the elements in the matrix is <b>constant</b>
 <p>
 </p></li><li> <font color="red"><b>dynamic</b></font>:
	the elements in the matrix <b>changes</b>
	after each iteration
 </li></ul>
</td> </tr>
</tbody></table>
</ul>
<p>
</p><hr>
 <p>
 </p></li><li> <font color="red"><b>Static</b></font> sparse matrices can 
	be
	<font color="blue"><b>represented</b></font>
	by using 
	<font color="red"><b>multiple arrays</b></font> :
  <p>
  </p><ul>
  <li> <font color="blue"><b>
	Coordinate-wise
	</b></font>
  </li><li> <font color="blue"><b>
	Compressed Sparse Row (CSR) 
	</b></font>
  </li><li> <font color="blue"><b>
	Compressed Sparse Column (CSC) 
	</b></font>
  </li></ul>
 <p>
 </p><hr>
 <p>
</p></li><li> <font color="red"><b>Dynamic</b></font> sparse matrices can 
        be
        <font color="blue"><b>represented</b></font>
        by using 
        <font color="red"><b>linked lists</b></font> 
 <p>
 </p><hr>
 <p>
 </p></li><li> Each type of representation has its strengths and its weaknesses.
  <p>
	Depending on what operations you want to perform with the sparse
	matrix, you pick the best representation...
  </p></li></ul>


<p>
</p><hr>
<hr>
<p>
</p></li><li> <font color="darkmagenta"> <b>
        The Coordinate-wise storage method
        </b></font>
  <p>
  </p><ul>
<li> A sparse matrix is stored using 3 arrays:
  <p>
</p><p>
</p><ul>
<table bgcolor="lightcyan" border="5">
<tbody><tr> <td>

  <ul>
  <li> <font color="red"><b><tt>Val[N]</tt></b></font>: 
	contains the value of the non-zero elements
  <p>
  </p></li><li> <font color="red"><b><tt>Row[N]</tt></b></font>: 
	contains the row-index of the non-zero elements
  <p>
  </p></li><li> <font color="red"><b><tt>Col[N]</tt></b></font>: 
	contains the column -index 
	of the non-zero elements
   </li></ul>
</td> </tr>
</tbody></table>
</ul>
<p>

</p><p>
</p></li><li> <b><i>Example:</i></b>
 <p>
</p><ul>
<table border="5">
<tbody><tr><td bgcolor="yellow">
<b> <pre>           0   1   2   3   4   5   6   7
      0 [ <font color="red">11</font>  12      14                 ]
      1 [     <font color="blue">22</font>  23      25             ]           
      2 [ 31      33  34                 ]          
      3 [     42          45  46         ]
      4 [                 55             ]
      5 [                 65  66  67     ]
      6 [                 <font color="red">75</font>      77  78 ]
      7 [                         87  88 ]
</pre></b>
</td></tr>
<tr><td bgcolor="lightgreen">
<b> 
Representation using Coordinate-wise method:
<p>
</p><pre>   Index   0    1    2    3    4    5    6    7    8    9   10
   -----------------------------------------------------------  
   Val    <font color="red">11</font>   12   14   <font color="blue">22</font>   23   25   31   33   34   42   45   
   Row     <font color="red">0</font>    0    0    <font color="blue">1</font>    1    1    2    2    2    3    3    
   Col     <font color="red">0</font>    1    3    <font color="blue">1</font>    2    4    0    2    3    1    4  

   Index  11   12   13   14   15   16   17   18   19   20   21 
   ------------------------------------------------------------ 
   Val    46   55   65   66   67   <font color="red">75</font>   77   78   87   88    -   
   Row     3    4    5    5    5    <font color="red">6</font>    6    6    7    7    -   
   Col     5    4    4    5    6    <font color="red">4</font>    6    7    6    7    -   
</pre>
</b></td></tr>
 </tbody></table>
   </ul>

 <p>
 </p><hr>
 <p>
 </p></li><li> <b><i>Properties of the Coordinate-wise method:</i></b>
  <p>
</p><p>
</p><ul>
<table bgcolor="lightcyan" border="5">
<tbody><tr> <td>

  <ul>
  <li> <b>Rows</b> or <b>columns</b> 
	<font color="blue"><b>need not be ordered </b></font>
	in any way.
  <p>
  </p></li><li> Storage requirement: 
   <p>
   </p><ul>
   <li> <font color="blue"><b>nnz</b></font>
	 floating point, and
   </li><li> <font color="blue"><b>2*nnz</b></font>
	 integer (indices).
   </li></ul>
   <p>
    (<font color="blue"><b>nnz</b></font>
	 = Number of Non-Zero values)
  </p><p>
  </p></li><li> <b>Accessing</b> the matrix elements by 
	<font color="blue"><b>row or column </b></font>
	is 
	<font color="red"><b>equally easy</b></font>.
  </li></ul>
</td> </tr>
</tbody></table>
</ul>
</li></ul>
<p>
</p><hr>
  <p>
 </p><ul>
 <li> <b>Matrix-vector</b> multiplication:
<p>
</p><ul>
<table bgcolor="yellow" border="5">
<tbody><tr> <td>

<font color="blue"><b>
<pre>           0   1   2   3   4   5   6   7
      0 [ 11  12      14                 ]   [ 3 ]
      1 [     22  23      25             ]   [ 5 ]   
      2 [ 31      33  34                 ]   [ 2 ]  
      3 [     42          45  46         ]   [ 1 ]
      4 [                 55             ] x [ 0 ]  =  ???      
      5 [                 65  66  67     ]   [ 1 ]
      6 [                 75      77  78 ]   [ 2 ]
      7 [                         87  88 ]   [ 4 ]

<font color="red">
                A[7][7]                       v[7]</font>
</pre>
</b></font>
</td> </tr>
</tbody></table>
</ul>
</li></ul>
<p>
</p><hr>
<p>
</p></li><li> <font color="darkmagenta"> <b>
        Example: Matrix-vector multiplication with the 
	Coordinate-wise storage method
        </b></font>
  <p>
  </p><ul>
 <p>
 </p><li> <b><i>Matrix-vector multiplication in the 
	Coordinate-wise method:</i></b>

<p>
 The following code fragment performs the matrix-vector multiplication
	when the matrix is stored using the Coordinate-wise method:
</p><p>
</p><ul>
<table border="5" bgcolor="yellow">
<tbody><tr><td>
<b> 
Multiply matrix (stored in Coordinate-wise method) with vector d[N]
<pre>   for (k = 0; k &lt; N; k = k + 1)
       result[i] = 0;

   for (k = 0; k &lt; nnz; k = k + 1)
       result[Row[k]] = result[Row[k]] + Val[k]*d[Col[k]];
</pre>
</b>
</td></tr>
 </tbody></table>
</ul>

<p>
</p></li><li> <b>Sample execution:</b>
<p>
</p><ul>
<table border="5" bgcolor="yellow">
<tbody><tr><td>
<b> 
Suppose d[0..N-1] = (1, 0, 0, 0, 0, 0, 0, 0)
<pre>  [ 11  12      14                 ]   [ 1 ]   [ 11 ]
  [     22  23      25             ]   [ 0 ]   [  0 ]
  [ 31      33  34                 ]   [ 0 ]   [ 31 ]
  [     42          45  46         ] X [ 0 ] = [  0 ]
  [                 55             ]   [ 0 ]   [  0 ]
  [                 65  66  67     ]   [ 0 ]   [  0 ]
  [                 75      77  78 ]   [ 0 ]   [  0 ]
  [                         87  88 ]   [ 0 ]   [  0 ]
</pre>
</b>
</td></tr>
<tr><td bgcolor="lightgreen">
<b>
<pre>After:

   for (k = 0; k &lt; N; k = k + 1)
       result[i] = 0;
<font color="blue">                          ---&gt; [0, 0, 0, 0, 0, 0, 0, 0]  
</font>
   k = 0;
       result[Row[0]] = result[Row[0]] + Val[0]*d[Col[0]];
       result[0] = result[0] + Val[0]*d[0];
       result[0] = 0 + 11*1;
<font color="blue">                          ---&gt; [11, 0, 0, 0, 0, 0, 0, 0]  
</font>
   k = 1;
       result[Row[1]] = result[Row[1]] + Val[1]*d[Col[1]];
       result[0] = result[0] + Val[1]*d[1];
       result[0] = 0 + 12*0;
<font color="blue">                          ---&gt; [11, 0, 0, 0, 0, 0, 0, 0]  
</font>
   k = 2;
       result[Row[2]] = result[Row[2]] + Val[2]*d[Col[2]];
       result[0] = result[0] + Val[2]*d[3];
       result[0] = 0 + 14*0;
<font color="blue">                          ---&gt; [11, 0, 0, 0, 0, 0, 0, 0]  
</font>
   ...
   k = 6;
       result[Row[6]] = result[Row[6]] + Val[6]*d[Col[6]];
       result[2] = result[2] + Val[6]*d[0];
       result[2] = 0 + 31*1;
<font color="blue">                          ---&gt; [11, 0, 31, 0, 0, 0, 0, 0]  
</font>
</pre>
</b></td></tr>
 </tbody></table>
</ul>

</li></ul>

<p>
</p><hr>
<hr>
<p>
</p></li><li> <font color="darkmagenta"> <b>
         The Compressed Sparse Row (CSR) Data Structure
        </b></font>
  <p>
  </p><ul>
<li> A sparse matrix is stored in CSR using 3 arrays:
  <p>
  </p><ul>
  <li> <b><tt>Val[N]</tt></b>: contains the value of the non-zero elements
  <p>
  </p></li><li> <b><tt>RowPtr[N]</tt></b>: contains the 
	<b><i>row-index range</i></b> of the non-zero elements
  <p>
  </p></li><li> <b><tt>Col[N]</tt></b>: contains the column-index 
	of the non-zero elements
   </li></ul>
<p>
</p><p>
</p></li><li> <b><i>Illustrative Example:</i></b>
 <p>
</p><ul>
<table border="5" bgcolor="yellow">
<tbody><tr><td>
<b> <pre>        [ <font color="red">11  12      14</font>                 ]
        [     22  23      25             ]           
        [ 31      33  34                 ]          
        [     <font color="blue">42          45  46</font>         ]
        [                 55             ]
        [                 65  66  67     ]
        [                 75      77  78 ]
        [                         87  88 ]
</pre></b>
</td></tr>
<tr><td bgcolor="lightgreen">
<b> 
Representation using Compressed Sparse Row method:
<p>
</p><pre>   Index   0    1    2    3    4    5    6    7    8    9   10
   -----------------------------------------------------------  
   Val    <font color="red">11   12   14</font>   22   23   25   31   33   34   <font color="blue">42   45   </font>
   RowPtr  <font color="red">0    3</font>    6    <font color="blue">9   12</font>   13   16   19   21    -    -
   Col     <font color="red">0    1    3</font>    1    2    4    0    2    3    <font color="blue">1    4  </font>

   Index  11   12   13   14   15   16   17   18   19   20   21 
   ------------------------------------------------------------ 
   Val    <font color="blue">46</font>   55   65   66   67   75   77   78   87   88    -   
   RowPtr  -    -    -    -    -    -    -    -    -    -    -
   Col     <font color="blue">5 </font>   4    4    5    6    4    6    7    6    7    -   
</pre>
</b></td></tr>
 </tbody></table>
   </ul>

 <p>
 </p></li><li> <b><i>Properties of the Compressed Sparse Row method:</i></b>
  <p>
  </p><ul>
  <li> Requires entries from a row to be <b><i>consecutively located</i></b>
	 in data structure.
  <p>
  </p></li><li> Columns need not be ordered in any way.
  <p>
  </p></li><li> Storage required: nnz floating point, nnz+N+1 integer.
        (nnz = Number of Non-Zero values, N = dimension of matrix)
  <p>
  </p></li><li> <font color="blue"><b>Row access is easy</b></font>, but
	<font color="red"><b>column access difficult</b></font>.
  <p>
  </p></li></ul>

 <p>
 </p></li><li> <b><i>Matrix-vector multiplication in the
        Compressed Sparse Row method:</i></b>

<p>
 The following code fragment performs the matrix-vector multiplication
        when the matrix is stored using the Compressed Sparse Row method:
</p><p>
</p><ul>
<table border="5" bgcolor="yellow">
<tbody><tr><td>
<b>
Multiply matrix (stored with Compressed Sparse Row method) with vector d[N]
<pre>   for (k = 0; k &lt; N; k = k + 1)
       result[i] = 0;

   for (i = 0; i &lt; N; i = i + 1)
   {  
      for (k = RowPtr[i]; k &lt; RowPtr[i+1]; k = k + 1)
      {  
         result[i] = result[i] + Val[k]*d[Col[k]];
      }  
   }  
</pre>
</b>
</td></tr>
 </tbody></table>
</ul>


<p>
</p></li><li> <b>Sample execution:</b>
<p>
</p><ul>
<table border="5" bgcolor="yellow">
<tbody><tr><td>
<b> 
Suppose d[0..N-1] = (1, 0, 0, 0, 0, 0, 0, 0)
<pre>  [ 11  12      14                 ]   [ 1 ]   [ 11 ]
  [     22  23      25             ]   [ 0 ]   [  0 ]
  [ 31      33  34                 ]   [ 0 ]   [ 31 ]
  [     42          45  46         ] X [ 0 ] = [  0 ]
  [                 55             ]   [ 0 ]   [  0 ]
  [                 65  66  67     ]   [ 0 ]   [  0 ]
  [                 75      77  78 ]   [ 0 ]   [  0 ]
  [                         87  88 ]   [ 0 ]   [  0 ]
</pre>
</b>
</td></tr>
<tr><td bgcolor="lightgreen">
<b>
<pre>After:

   for (k = 0; k &lt; N; k = k + 1)
       result[i] = 0;
<font color="blue">                          ---&gt; [0, 0, 0, 0, 0, 0, 0, 0]  
</font>
   i = 0;
   k = 0;
       result[0] = result[0] + Val[0]*d[Col[0]];
       result[0] = result[0] + Val[0]*d[0];
       result[0] = 0 + 11*1;
<font color="blue">                          ---&gt; [11, 0, 0, 0, 0, 0, 0, 0]  
</font>
   i = 0;
   k = 1;
       result[0] = result[0] + Val[1]*d[Col[1]];
       result[0] = result[0] + Val[1]*d[1];
       result[0] = 0 + 12*0;
<font color="blue">                          ---&gt; [11, 0, 0, 0, 0, 0, 0, 0]  
</font>
   i = 0;
   k = 2;
       result[0] = result[0] + Val[2]*d[Col[2]];
       result[0] = result[0] + Val[2]*d[3];
       result[0] = 0 + 14*0;
<font color="blue">                          ---&gt; [11, 0, 0, 0, 0, 0, 0, 0]  
</font>
   ...
   i = 2;
   k = RowPtr[2] = 6;
       result[2] = result[2] + Val[6]*d[Col[6]];
       result[2] = result[2] + Val[6]*d[0];
       result[2] = 0 + 31*1;
<font color="blue">                          ---&gt; [11, 0, 31, 0, 0, 0, 0, 0]  
</font>
</pre>
</b></td></tr>
 </tbody></table>
</ul>
<p>
</p></li><li> <b><i>Advantage of CSR method over Coordinate-wise method:</i></b>
 <p>
 </p><ul>
 <li> The number of operations to perform matrix-vector
	multiplication in both storage method are the same...
  <p>
  </p></li><li> However: the number of <b><i>memory accesses</i></b> is reduced
	(by 2 to be exact) in the CSR method:
  <p>
  </p></li><li> The statement
 <p>
 </p><ul>
	<b><tt>result[Row[k]] = result[Row[k]] + Val[k]*d[Col[k]];</tt></b>
 </ul>
 <p>
 in the Coordinate-wise method, uses <b><i>2 more</i></b> 
	memory accesses than the statement
 </p><p>
 </p><ul>
	<b><tt>result[i] = result[i] + Val[k]*d[Col[k]];</tt></b>
 </ul>
 <p>
	in the CSR method.



</p></li></ul>
</li></ul>



</li></ul>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
</body></html>Ytext/htmlUUTF-8_Hhttp://www.mathcs.emory.edu/~cheung/Courses/561/Syllabus/3-C/sparse.html    ( ? Q g Ö î ï?—?€?·                           @,